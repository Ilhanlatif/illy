#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.12 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 92 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 4 32
#"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 57 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 190 190 190 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 107 142 35 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 100 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 100 149 237 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 65 105 225 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 70 130 180 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 47 79 79 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 139 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 75 0 130 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 160 32 240 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 250 128 114 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 184 134 11 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 128 128 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 169 169 169 0 0 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 0 0 0 0 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 228 225 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 224 255 255 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 57 1
#"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 57 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 224 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 4
1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 228 225 -1 -1
56 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 0 1
#"\0"
0 -1 1 #"\0"
0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 2987 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 6 #"srfi/1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 7 #"srfi/13"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"( "
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"objects"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 19 3 18 #"\"a silver dagger \""
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 19 3 14 #"\"a gold coin \""
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"a torch\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"a laptop\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"a gun\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"a gold coin\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"a dagger\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 19 3 16 #"\"health booster\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 19 3 13 #"\"sliver coin\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"gun\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"descriptions"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"( ("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 19 3 12 #"\"You are in "
0 0 19 3 13 #"the Entrance "
0 0 19 3 3 #"you"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #" "
0 0 19 3 3 #"see"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 4 #"exit"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 5 #"North"
0 0 19 3 1 #" "
0 0 19 3 3 #"and"
0 0 19 3 6 #" East."
0 0 19 29 1 #"\n"
0 0 19 3 3 #"You"
0 0 19 3 34 #" can see a silver dagger and a gol"
0 0 19 3 1 #"d"
0 0 19 3 6 #" coin\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"You"
0 0 19 3 1 #" "
0 0 19 3 3 #"are"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 7 #"hallway"
0 0 19 3 1 #" "
0 0 19 3 5 #"there"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 4 #"exit"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 5 #"South"
0 0 19 3 1 #" "
0 0 19 3 3 #"and"
0 0 19 3 6 #" East."
0 0 19 29 1 #"\n"
0 0 19 3 29 #"You can see a Torch and Sparr"
0 0 19 3 1 #"o"
0 0 19 3 2 #"w\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"You"
0 0 19 3 1 #" "
0 0 19 3 3 #"are"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 8 #" garden "
0 0 19 3 5 #"there"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 4 #"exit"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 5 #" East"
0 0 19 3 1 #" "
0 0 19 3 3 #"and"
0 0 19 3 6 #" West."
0 0 19 29 1 #"\n"
0 0 19 3 25 #"You can see a gun a gold "
0 0 19 3 1 #"c"
0 0 19 3 4 #"oin\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"You"
0 0 19 3 1 #" "
0 0 19 3 3 #"are"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 7 #" Corrid"
0 0 19 3 1 #"o"
0 0 19 3 7 #"r there"
0 0 19 3 1 #" "
0 0 19 3 2 #"is"
0 0 19 3 1 #" "
0 0 19 3 4 #"exit"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 5 #"West "
0 0 19 3 3 #"and"
0 0 19 3 7 #" South."
0 0 19 29 1 #"\n"
0 0 19 3 39 #"You can see a health booster and a dagg"
0 0 19 3 1 #"g"
0 0 19 3 3 #"er\""
0 0 24 3 20 #")                   "
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"You"
0 0 19 3 1 #" "
0 0 19 3 3 #"are"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 20 #" bedroom there is ex"
0 0 19 3 1 #"i"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 19 #"the West and North\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"You"
0 0 19 3 1 #" "
0 0 19 3 3 #"are"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 15 #" bathroom there"
0 0 19 3 1 #" "
0 0 19 3 7 #"is exit"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 6 #" West."
0 0 19 29 1 #"\n"
0 0 19 3 29 #"You can see a sliver coin and"
0 0 19 3 1 #" "
0 0 19 3 4 #"gun\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";(define directions '( (1 (north 2) (south 0) (east 0) (west 0))"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";                      (2 (north 0) (south 1) (east 3) (west 0))"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";                      (3 (north 0) (south 0) (east 4) (west 2))"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";                      (4 (north 0) (south 5) (east 0) (west 3))"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";                      (5 (north 0) (south 0) (east 0) (west 6)"
0 0 24 29 1 #"\n"
0 0 17 3 67
#";                      (6 (north 0) (south 0) (east 5) (west 1)))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"look"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"((("
0 0 14 3 10 #"directions"
0 0 24 3 2 #") "
0 0 14 3 4 #"look"
0 0 24 3 4 #") (("
0 0 14 3 4 #"look"
0 0 24 3 2 #") "
0 0 14 3 4 #"look"
0 0 24 3 4 #") (("
0 0 14 3 7 #"examine"
0 0 24 3 1 #" "
0 0 14 3 4 #"room"
0 0 24 3 2 #") "
0 0 14 3 4 #"look"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"quit"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"((("
0 0 14 3 4 #"exit"
0 0 24 3 1 #" "
0 0 14 3 4 #"game"
0 0 24 3 2 #") "
0 0 14 3 4 #"quit"
0 0 24 3 4 #") (("
0 0 14 3 4 #"quit"
0 0 24 3 1 #" "
0 0 14 3 4 #"game"
0 0 24 3 2 #") "
0 0 14 3 4 #"quit"
0 0 24 3 4 #") (("
0 0 14 3 4 #"exit"
0 0 24 3 2 #") "
0 0 14 3 4 #"quit"
0 0 24 3 4 #") (("
0 0 14 3 4 #"quit"
0 0 24 3 2 #") "
0 0 14 3 4 #"quit"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"pick"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"((("
0 0 14 3 3 #"get"
0 0 24 3 2 #") "
0 0 14 3 4 #"pick"
0 0 24 3 4 #") (("
0 0 14 3 6 #"pickup"
0 0 24 3 2 #") "
0 0 14 3 4 #"pick"
0 0 24 3 4 #") (("
0 0 14 3 4 #"pick"
0 0 24 3 2 #") "
0 0 14 3 4 #"pick"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"((("
0 0 14 3 3 #"put"
0 0 24 3 2 #") "
0 0 14 3 4 #"drop"
0 0 24 3 4 #") (("
0 0 14 3 4 #"drop"
0 0 24 3 2 #") "
0 0 14 3 4 #"drop"
0 0 24 3 4 #") (("
0 0 14 3 5 #"place"
0 0 24 3 2 #") "
0 0 14 3 4 #"drop"
0 0 24 3 4 #") (("
0 0 14 3 5 #"remov"
0 0 24 3 3 #" ) "
0 0 14 3 4 #"drop"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"inventory"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"((("
0 0 14 3 9 #"inventory"
0 0 24 3 2 #") "
0 0 14 3 9 #"inventory"
0 0 24 3 4 #") (("
0 0 14 3 3 #"bag"
0 0 24 3 2 #") "
0 0 14 3 9 #"inventory"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"actions"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 1 #"("
0 0 28 3 2 #",@"
0 0 14 3 4 #"look"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 14 3 4 #"quit"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 14 3 4 #"pick"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 14 3 3 #"put"
0 0 24 3 1 #" "
0 0 28 3 2 #",@"
0 0 14 3 9 #"inventory"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"decisiontable"
0 0 24 3 1 #" "
0 0 21 3 1 #"`"
0 0 24 3 2 #"(("
0 0 21 3 1 #"1"
0 0 24 3 3 #" (("
0 0 14 3 5 #"north"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 4 #") (("
0 0 14 3 4 #"east"
0 0 24 3 2 #") "
0 0 21 3 1 #"6"
0 0 24 3 2 #") "
0 0 28 3 2 #",@"
0 0 14 3 7 #"actions"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 21 3 1 #"2"
0 0 24 3 3 #" (("
0 0 14 3 5 #"south"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 4 #") (("
0 0 14 3 4 #"east"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 28 3 2 #",@"
0 0 14 3 7 #"actions"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 21 3 1 #"3"
0 0 24 3 3 #" (("
0 0 14 3 4 #"east"
0 0 24 3 3 #")  "
0 0 21 3 1 #"4"
0 0 24 3 4 #") (("
0 0 14 3 4 #"west"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 2 #") "
0 0 28 3 2 #",@"
0 0 14 3 7 #"actions"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 21 3 1 #"4"
0 0 24 3 3 #" (("
0 0 14 3 5 #"south"
0 0 24 3 2 #") "
0 0 21 3 1 #"5"
0 0 24 3 4 #") (("
0 0 14 3 4 #"west"
0 0 24 3 2 #") "
0 0 21 3 1 #"3"
0 0 24 3 2 #") "
0 0 28 3 2 #",@"
0 0 14 3 7 #"actions"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 21 3 1 #"5"
0 0 24 3 3 #" (("
0 0 14 3 4 #"west"
0 0 24 3 3 #")  "
0 0 21 3 1 #"6"
0 0 24 3 4 #") (("
0 0 14 3 4 #"east"
0 0 24 3 2 #") "
0 0 21 3 1 #"4"
0 0 24 3 2 #") "
0 0 28 3 2 #",@"
0 0 14 3 7 #"actions"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 21 3 1 #"6"
0 0 24 3 3 #" (("
0 0 14 3 4 #"east"
0 0 24 3 3 #")  "
0 0 21 3 1 #"5"
0 0 24 3 4 #") (("
0 0 14 3 4 #"west"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 28 3 2 #",@"
0 0 14 3 7 #"actions"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #"; ; the structure representing a maze of size NxM"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"( "
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 4 #"maze"
0 0 24 3 3 #" ( "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"M"
0 0 24 3 1 #" "
0 0 14 3 3 #"tbl"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 17 3 28 #"; ; managing cell properties"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; ; A dictionary is a"
0 0 17 3 49 #"n instance of a datatype that maps keys to values"
0 0 24 29 1 #"\n"
0 0 17 3 42 #"; ; e . g . hash table , list , structures"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"( "
0 0 15 3 6 #"define"
0 0 24 3 3 #" ( "
0 0 14 3 11 #"connections"
0 0 24 3 1 #" "
0 0 14 3 3 #"tbl"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 4 #") ( "
0 0 14 3 8 #"dict-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"tbl"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 17 3 79
(
 #"; ; dict-set ! maps key to v in dict , overwriting any existing mapp"
 #"ing for key"
) 0 0 24 29 1 #"\n"
0 0 24 3 2 #"( "
0 0 15 3 6 #"define"
0 0 24 3 3 #" ( "
0 0 14 3 8 #"connect!"
0 0 24 3 1 #" "
0 0 14 3 3 #"tbl"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   ( "
0 0 14 3 9 #"dict-set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"tbl"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #" ( "
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #" ( "
0 0 14 3 11 #"connections"
0 0 24 3 1 #" "
0 0 14 3 3 #"tbl"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 4 #" )))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   ( "
0 0 14 3 9 #"dict-set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"tbl"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #" ( "
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #" ( "
0 0 14 3 11 #"connections"
0 0 24 3 1 #" "
0 0 14 3 3 #"tbl"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 5 #" ))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"( "
0 0 15 3 6 #"define"
0 0 24 3 3 #" ( "
0 0 14 3 10 #"connected?"
0 0 24 3 1 #" "
0 0 14 3 3 #"tbl"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 4 #") ( "
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 3 #" ( "
0 0 14 3 11 #"connections"
0 0 24 3 1 #" "
0 0 14 3 3 #"tbl"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 4 #" )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #"; ; Returns a maze of a given size"
0 0 24 29 1 #"\n"
0 0 17 3 38 #"; ; build-maze :: Index Index - > Maze"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"build-maze"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"M"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"tbl"
0 0 24 3 2 #" ("
0 0 14 3 9 #"make-hash"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"visited?"
0 0 24 3 1 #" "
0 0 14 3 3 #"tbl"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 3 #") ("
0 0 14 3 13 #"dict-has-key?"
0 0 24 3 1 #" "
0 0 14 3 3 #"tbl"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"neigbours"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"filter"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 12 #"match-lambda"
0 0 24 3 3 #" [("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 3 #") ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"M"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #")))])"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 8 #"for/list"
0 0 24 3 3 #" (["
0 0 14 3 1 #"d"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 3 #") ("
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 6 #"))]) ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"d"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 18 #";generate the maze"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 12 #"move-to-cell"
0 0 24 3 3 #" (["
0 0 14 3 1 #"c"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 3 #") ("
0 0 14 3 6 #"random"
0 0 24 3 1 #" "
0 0 14 3 1 #"M"
0 0 24 3 5 #" ))])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"for"
0 0 24 3 3 #" (["
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 7 #"shuffle"
0 0 24 3 2 #" ("
0 0 14 3 9 #"neigbours"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 4 #"))] "
0 0 23 3 8 #"#:unless"
0 0 24 3 2 #" ("
0 0 14 3 8 #"visited?"
0 0 24 3 1 #" "
0 0 14 3 3 #"tbl"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"connect!"
0 0 24 3 1 #" "
0 0 14 3 3 #"tbl"
0 0 24 3 1 #" "
0 0 14 3 1 #"c"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 12 #"move-to-cell"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 18 #";return the result"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"M"
0 0 24 3 1 #" "
0 0 14 3 3 #"tbl"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 24 #"; ; ~~~ Users config ~~~"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"X"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"Y"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 52 #"; ; include maze algorithm with X and Y as M and N ."
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 2 #" ("
0 0 14 3 10 #"build-maze"
0 0 24 3 1 #" "
0 0 14 3 1 #"X"
0 0 24 3 1 #" "
0 0 14 3 1 #"Y"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 56 #"; ; the paths function provides the available directions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"paths"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 12 #"match-define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 14 3 1 #"N"
0 0 24 3 1 #" "
0 0 14 3 1 #"M"
0 0 24 3 1 #" "
0 0 14 3 3 #"tbl"
0 0 24 3 2 #") "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 5 #"first"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"second"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"first"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 6 #"second"
0 0 24 3 3 #")  "
0 0 21 3 1 #"'"
0 0 14 3 5 #"south"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"north"
0 0 24 3 3 #" )]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"second"
0 0 24 3 3 #" ) "
0 0 21 3 1 #"'"
0 0 14 3 4 #"east"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 14 3 4 #"west"
0 0 24 3 7 #" )]) ))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 11 #"connections"
0 0 24 3 1 #" "
0 0 14 3 3 #"tbl"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 4 #" )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"( "
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"room-type"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"( ( "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"entrance "
0 0 19 29 1 #"\n"
0 0 19 3 3 #"You"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #" "
0 0 19 3 3 #"see"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 6 #"silver"
0 0 19 3 1 #" "
0 0 19 3 6 #"dagger"
0 0 19 3 1 #" "
0 0 19 3 3 #"and"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 4 #"gold"
0 0 19 3 6 #" coin "
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"hallway"
0 0 19 3 1 #" "
0 0 19 29 1 #"\n"
0 0 19 3 3 #"You"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #" "
0 0 19 3 3 #"see"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 5 #"Torch"
0 0 19 3 1 #" "
0 0 19 3 3 #"and"
0 0 19 3 9 #" Sparrow "
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 7 #"garden "
0 0 19 29 1 #"\n"
0 0 19 3 25 #"You can see a gun a gold "
0 0 19 3 5 #"coin\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"corridor "
0 0 19 29 1 #"\n"
0 0 19 3 39 #"You can see a health booster and a dagg"
0 0 19 3 4 #"ger\""
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"bedroom"
0 0 19 29 1 #"\n"
0 0 19 3 21 #"this room is empty! \""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"bathroom "
0 0 19 29 1 #"\n"
0 0 19 3 29 #"You can see a sliver coin and"
0 0 19 3 5 #" gun\""
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      ))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                   "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"( "
0 0 15 3 6 #"define"
0 0 24 3 3 #" ( "
0 0 14 3 8 #"assq-ref"
0 0 24 3 1 #" "
0 0 14 3 8 #"assqlist"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   ( "
0 0 14 3 4 #"cadr"
0 0 24 3 3 #" ( "
0 0 14 3 4 #"assq"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 8 #"assqlist"
0 0 24 3 4 #" )))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"( "
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"rooms"
0 0 24 3 3 #" ( "
0 0 14 3 9 #"make-hash"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"( "
0 0 15 3 6 #"define"
0 0 24 3 3 #" ( "
0 0 14 3 14 #"room-allocator"
0 0 24 3 1 #" "
0 0 14 3 2 #"db"
0 0 24 3 1 #" "
0 0 14 3 5 #"types"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 3 #"for"
0 0 24 3 4 #" (( "
0 0 14 3 1 #"j"
0 0 24 3 1 #" "
0 0 14 3 1 #"X"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 3 #"for"
0 0 24 3 4 #" (( "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"Y"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 9 #"hash-set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"db"
0 0 24 3 3 #" ( "
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 4 #") ( "
0 0 14 3 8 #"assq-ref"
0 0 24 3 1 #" "
0 0 14 3 5 #"types"
0 0 24 3 3 #" ( "
0 0 14 3 6 #"random"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 3 #" ( "
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 5 #"types"
0 0 24 3 3 #" ) "
0 0 21 3 1 #"1"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"room-allocator"
0 0 24 3 1 #" "
0 0 14 3 5 #"rooms"
0 0 24 3 1 #" "
0 0 14 3 9 #"room-type"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"slist->string"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"string-join"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 14 #"symbol->string"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"get-directions"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"record"
0 0 24 3 2 #" ("
0 0 14 3 4 #"assq"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 13 #"decisiontable"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 6 #"result"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"n"
0 0 24 3 3 #") ("
0 0 14 3 7 #"number?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 5 #"))) ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"record"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"You"
0 0 19 3 1 #" "
0 0 19 3 6 #"appear"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 4 #"have"
0 0 19 3 1 #" "
0 0 19 3 7 #"entered"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 4 #"room"
0 0 19 3 1 #" "
0 0 19 3 4 #"with"
0 0 19 3 1 #" "
0 0 19 3 2 #"no"
0 0 19 3 9 #" exits.\\n"
0 0 19 3 1 #"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            (("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"You"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #" "
0 0 19 3 3 #"see"
0 0 19 3 1 #" "
0 0 19 3 2 #"an"
0 0 19 3 1 #" "
0 0 19 3 4 #"exit"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 6 #" ~a.\\n"
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 14 3 13 #"slist->string"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 5 #"losym"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 6 #"result"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 5 #"lostr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 13 #"slist->string"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 5 #"losym"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 3 #"You"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #" "
0 0 19 3 3 #"see"
0 0 19 3 1 #" "
0 0 19 3 5 #"exits"
0 0 19 3 1 #" "
0 0 19 3 2 #"to"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 6 #" ~a.\\n"
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-join"
0 0 24 3 1 #" "
0 0 14 3 5 #"lostr"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #" "
0 0 19 3 4 #"and "
0 0 19 3 1 #"\""
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"objectdb"
0 0 24 3 3 #" ( "
0 0 14 3 9 #"make-hash"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"inventorydb"
0 0 24 3 3 #" ( "
0 0 14 3 9 #"make-hash"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"add-object"
0 0 24 3 1 #" "
0 0 14 3 2 #"db"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 6 #"object"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 13 #"hash-has-key?"
0 0 24 3 1 #" "
0 0 14 3 2 #"db"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 6 #"record"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 2 #"db"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 4 #" )))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"hash-set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"db"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 6 #"object"
0 0 24 3 1 #" "
0 0 14 3 6 #"record"
0 0 24 3 4 #" )))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"hash-set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"db"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 6 #"object"
0 0 24 3 1 #" "
0 0 14 3 5 #"empty"
0 0 24 3 5 #" ))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"add-objects"
0 0 24 3 1 #" "
0 0 14 3 2 #"db"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"for-each"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 10 #"add-object"
0 0 24 3 1 #" "
0 0 14 3 2 #"db"
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 3 #") ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 1 #"r"
0 0 24 3 5 #" ))) "
0 0 14 3 7 #"objects"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 11 #"add-objects"
0 0 24 3 1 #" "
0 0 14 3 8 #"objectdb"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";(define (assq-ref assqlist id)"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";(cdr (assq id assqlist)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"get-room-description"
0 0 24 3 1 #" "
0 0 14 3 3 #"rid"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 8 #"assq-ref"
0 0 24 3 1 #" "
0 0 14 3 12 #"descriptions"
0 0 24 3 1 #" "
0 0 14 3 3 #"rid"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"assv-ref"
0 0 24 3 1 #" "
0 0 14 3 8 #"assqlist"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 4 #"assv"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 8 #"assqlist"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-keywords"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"keys"
0 0 24 3 2 #" ("
0 0 14 3 8 #"assq-ref"
0 0 24 3 1 #" "
0 0 14 3 13 #"decisiontable"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"key"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 3 #"key"
0 0 24 3 3 #")) "
0 0 14 3 4 #"keys"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 23 #"index-of-largest-number"
0 0 24 3 1 #" "
0 0 14 3 15 #"list-of-numbers"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 1 #"n"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sort"
0 0 24 3 1 #" "
0 0 14 3 15 #"list-of-numbers"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 2 #"#f"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 10 #"list-index"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 3 #")) "
0 0 14 3 15 #"list-of-numbers"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"list-of-lengths"
0 0 24 3 1 #" "
0 0 14 3 7 #"keylist"
0 0 24 3 1 #" "
0 0 14 3 6 #"tokens"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"set"
0 0 24 3 2 #" ("
0 0 14 3 17 #"lset-intersection"
0 0 24 3 1 #" "
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 6 #"tokens"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"       "
0 0 17 3 37 #";; apply some weighting to the result"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"set"
0 0 24 3 3 #") ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 3 #"set"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 7 #"keylist"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";stop repetition "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"evaluate"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #"  (("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 21 3 1 #"'"
0 0 14 3 3 #"bag"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 14 3 2 #"id"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"( "
0 0 15 3 6 #"define"
0 0 24 3 3 #" ( "
0 0 14 3 23 #"remove-object-from-room"
0 0 24 3 1 #" "
0 0 14 3 2 #"db"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 3 #" ( "
0 0 17 3 31 #"remove-object db id from input)"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 2 #";("
0 0 17 3 72
(
 #"let* ((str (string-join (cdr (string-split input))));; remove car (p"
 #"ick)"
) 0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 17 3 2 #";("
0 0 17 3 5 #"newid"
0 0 17 3 26 #" (evaluate from 'bag id)))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"when"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"hash-has-key?"
0 0 24 3 1 #" "
0 0 14 3 2 #"db"
0 0 24 3 8 #"  )    ("
0 0 15 3 4 #"let*"
0 0 24 3 4 #" (( "
0 0 14 3 6 #"record"
0 0 24 3 3 #" ( "
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 2 #"db"
0 0 24 3 4 #"  ))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"result"
0 0 24 3 2 #" ("
0 0 14 3 6 #"remove"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 17 #"string-suffix-ci?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")) "
0 0 14 3 6 #"record"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 4 #"item"
0 0 24 3 3 #" ( "
0 0 14 3 15 #"lset-difference"
0 0 24 3 1 #" "
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 6 #"record"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 4 #" )))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #" (( "
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #"I"
0 0 19 3 1 #" "
0 0 19 3 3 #"don"
0 0 19 3 1 #" "
0 0 19 3 4 #"\342\200\231t"
0 0 19 3 1 #" "
0 0 19 3 3 #"see"
0 0 19 3 1 #" "
0 0 19 3 4 #"that"
0 0 19 3 1 #" "
0 0 19 3 4 #"item"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 4 #"room"
0 0 19 3 4 #" !\\n"
0 0 19 3 1 #"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";            ( else"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 37 #"              (cond ((eq? from 'room)"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";              ( printf \""
0 0 17 3 1 #" "
0 0 17 3 5 #"Added"
0 0 17 3 1 #" "
0 0 17 3 2 #"~a"
0 0 17 3 1 #" "
0 0 17 3 2 #"to"
0 0 17 3 1 #" "
0 0 17 3 4 #"your"
0 0 17 3 1 #" "
0 0 17 3 3 #"bag"
0 0 17 3 1 #" "
0 0 17 3 20 #".\\n\" ( first item ))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              ( "
0 0 14 3 10 #"add-object"
0 0 24 3 1 #" "
0 0 14 3 11 #"inventorydb"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 14 3 3 #"bag"
0 0 24 3 3 #" ( "
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              ( "
0 0 14 3 9 #"hash-set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"db"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 6 #" )))))"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";            (else"
0 0 24 29 1 #"\n"
0 0 17 3 24 #";             (printf  \""
0 0 17 3 7 #"removed"
0 0 17 3 1 #" "
0 0 17 3 2 #"-a"
0 0 17 3 1 #" "
0 0 17 3 4 #"from"
0 0 17 3 1 #" "
0 0 17 3 4 #"your"
0 0 17 3 1 #" "
0 0 17 3 21 #"bag.\\n\" (first item))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 23 #"                      ("
0 0 17 3 37 #"add-object objectdb id (first item ))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 17 3 35 #"                                  ("
0 0 17 3 29 #"hash-set! db 'bag result)))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 28 #"remove-object-from-inventory"
0 0 24 3 1 #" "
0 0 14 3 2 #"db"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ( "
0 0 15 3 4 #"when"
0 0 24 3 3 #" ( "
0 0 14 3 13 #"hash-has-key?"
0 0 24 3 1 #" "
0 0 14 3 2 #"db"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"bag"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     ( "
0 0 15 3 4 #"let*"
0 0 24 3 3 #"(( "
0 0 14 3 6 #"record"
0 0 24 3 3 #" ( "
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 2 #"db"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"bag"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            ( "
0 0 14 3 6 #"result"
0 0 24 3 3 #" ( "
0 0 14 3 6 #"remove"
0 0 24 3 3 #" ( "
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 4 #") ( "
0 0 14 3 17 #"string-suffix-ci?"
0 0 24 3 1 #" "
0 0 14 3 3 #"str"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #" )) "
0 0 14 3 6 #"record"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            ( "
0 0 14 3 4 #"item"
0 0 24 3 3 #" ( "
0 0 14 3 15 #"lset-difference"
0 0 24 3 1 #" "
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 6 #"record"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 4 #" )))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        ( "
0 0 15 3 4 #"cond"
0 0 24 3 4 #" (( "
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                ( "
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #" "
0 0 19 3 3 #"You"
0 0 19 3 1 #" "
0 0 19 3 3 #"are"
0 0 19 3 1 #" "
0 0 19 3 3 #"not"
0 0 19 3 1 #" "
0 0 19 3 8 #"carrying"
0 0 19 3 1 #" "
0 0 19 3 4 #"that"
0 0 19 3 8 #" item!\\n"
0 0 19 3 1 #"\""
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"               ( "
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                 ( "
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #" "
0 0 19 3 7 #"Removed"
0 0 19 3 1 #" "
0 0 19 3 2 #"~a"
0 0 19 3 1 #" "
0 0 19 3 4 #"from"
0 0 19 3 1 #" "
0 0 19 3 4 #"your"
0 0 19 3 1 #" "
0 0 19 3 3 #"bag"
0 0 19 3 4 #" .\\n"
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                 ( "
0 0 14 3 10 #"add-object"
0 0 24 3 1 #" "
0 0 14 3 8 #"objectdb"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 3 #" ( "
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                 ( "
0 0 14 3 9 #"hash-set!"
0 0 24 3 1 #" "
0 0 14 3 2 #"db"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"bag"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 7 #" ))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"pick-item"
0 0 24 3 2 #"  "
0 0 14 3 4 #"from"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 5 #"input"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 4 #"from"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"bag"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 39 #";(remove-object inventorydb 'bag input)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 3 #"; ("
0 0 17 3 13 #"remove-object"
0 0 17 3 26 #" objectdb id 'room input))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"put-item"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 5 #"input"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"item"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-join"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string-split"
0 0 24 3 1 #" "
0 0 14 3 5 #"input"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 28 #"remove-object-from-inventory"
0 0 24 3 1 #" "
0 0 14 3 11 #"inventorydb"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 4 #"item"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"display-inventory"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 15 #"display-objects"
0 0 24 3 1 #" "
0 0 14 3 11 #"inventorydb"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 14 3 3 #"bag"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"display-objects"
0 0 24 3 1 #" "
0 0 14 3 2 #"db"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"when"
0 0 24 3 2 #" ("
0 0 14 3 13 #"hash-has-key?"
0 0 24 3 1 #" "
0 0 14 3 2 #"db"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"let*"
0 0 24 3 3 #" (("
0 0 14 3 6 #"record"
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 2 #"db"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"output"
0 0 24 3 2 #" ("
0 0 14 3 11 #"string-join"
0 0 24 3 1 #" "
0 0 14 3 6 #"record"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #" "
0 0 19 3 4 #"and "
0 0 19 3 1 #"\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 4 #"when"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 6 #"output"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 14 3 3 #"bag"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #" "
0 0 19 3 3 #"You"
0 0 19 3 1 #" "
0 0 19 3 3 #"are"
0 0 19 3 1 #" "
0 0 19 3 8 #"carrying"
0 0 19 3 1 #" "
0 0 19 3 2 #"~a"
0 0 19 3 4 #" .\\n"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 6 #"output"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #" "
0 0 19 3 3 #"You"
0 0 19 3 1 #" "
0 0 19 3 3 #"can"
0 0 19 3 1 #" "
0 0 19 3 3 #"see"
0 0 19 3 1 #" "
0 0 19 3 2 #"~a"
0 0 19 3 1 #" "
0 0 19 3 4 #".\\n "
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 6 #"output"
0 0 24 3 7 #" ))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";(define (lookup room-id direction)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 3 #"; ("
0 0 17 3 3 #"car"
0 0 17 3 53 #" (assq-ref (assq-ref directions room-id) direction)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";(define (lookup id tokens)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #" "
0 0 17 3 45 #"; (let* ((record (assv-ref decisiontable id))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 17 3 35 #";       (keylist (get-keywords id))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 17 3 74
(
 #";      (index (index-of-largest-number (list-of-lengths keylist toke"
 #"ns))))"
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 11 #";(if index "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 34 #";   (cadr (list-ref record index))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 8 #";  #f)))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"get-response"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 8 #"assq-ref"
0 0 24 3 1 #" "
0 0 14 3 12 #"descriptions"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 27 #"; ; show maze with position"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"show-maze"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ( "
0 0 15 3 12 #"match-define"
0 0 24 3 3 #" ( "
0 0 14 3 4 #"maze"
0 0 24 3 1 #" "
0 0 14 3 1 #"X"
0 0 24 3 1 #" "
0 0 14 3 1 #"Y"
0 0 24 3 1 #" "
0 0 14 3 3 #"tbl"
0 0 24 3 3 #" ) "
0 0 14 3 1 #"m"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ( "
0 0 15 3 3 #"for"
0 0 24 3 4 #" ([ "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"X"
0 0 24 3 6 #" ]) ( "
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"+---"
0 0 19 3 1 #"\""
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ( "
0 0 14 3 9 #"displayln"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"+"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ( "
0 0 15 3 3 #"for"
0 0 24 3 4 #" ([ "
0 0 14 3 1 #"j"
0 0 24 3 1 #" "
0 0 14 3 1 #"Y"
0 0 24 3 3 #" ])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     ( "
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"|\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     ( "
0 0 15 3 3 #"for"
0 0 24 3 4 #" ([ "
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"X"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        ( "
0 0 14 3 2 #"if"
0 0 24 3 3 #" ( "
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 3 #" ) "
0 0 14 3 3 #"pos"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             ( "
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 4 #"\" *\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             ( "
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"  \""
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        ( "
0 0 14 3 2 #"if"
0 0 24 3 3 #" ( "
0 0 14 3 10 #"connected?"
0 0 24 3 1 #" "
0 0 14 3 3 #"tbl"
0 0 24 3 3 #" ( "
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 5 #" ) ( "
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #") "
0 0 14 3 1 #"j"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             ( "
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"  \""
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"             ( "
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 3 #"\" |"
0 0 19 3 1 #"\""
0 0 24 3 4 #" )))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     ( "
0 0 14 3 7 #"newline"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     ( "
0 0 15 3 3 #"for"
0 0 24 3 4 #" ([ "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"X"
0 0 24 3 3 #" ])"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        ( "
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 10 #"connected?"
0 0 24 3 1 #" "
0 0 14 3 3 #"tbl"
0 0 24 3 3 #" ( "
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 5 #" ) ( "
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"+   "
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 7 #"display"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"+---"
0 0 19 3 1 #"\""
0 0 24 3 4 #" )))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"     ( "
0 0 14 3 9 #"displayln"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"+"
0 0 19 3 1 #"\""
0 0 24 3 4 #" )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"( "
0 0 15 3 6 #"define"
0 0 24 3 3 #" ( "
0 0 14 3 6 #"move-x"
0 0 24 3 1 #" "
0 0 14 3 4 #"room"
0 0 24 3 1 #" "
0 0 14 3 3 #"fun"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   ( "
0 0 14 3 4 #"cons"
0 0 24 3 3 #" ( "
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"room"
0 0 24 3 5 #" ) ( "
0 0 14 3 3 #"map"
0 0 24 3 3 #" ( "
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ( "
0 0 14 3 1 #"x"
0 0 24 3 4 #") ( "
0 0 14 3 3 #"fun"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 5 #")) ( "
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"room"
0 0 24 3 5 #" ))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"( "
0 0 15 3 6 #"define"
0 0 24 3 3 #" ( "
0 0 14 3 6 #"move-y"
0 0 24 3 1 #" "
0 0 14 3 4 #"room"
0 0 24 3 1 #" "
0 0 14 3 3 #"fun"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   ( "
0 0 14 3 4 #"cons"
0 0 24 3 3 #" ( "
0 0 14 3 3 #"fun"
0 0 24 3 3 #" ( "
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"room"
0 0 24 3 3 #" ) "
0 0 21 3 1 #"1"
0 0 24 3 4 #") ( "
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"room"
0 0 24 3 4 #" )))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"( "
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 4 #"room"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   ( "
0 0 15 3 4 #"cond"
0 0 24 3 4 #" [( "
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #" "
0 0 14 3 5 #"south"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"           ( "
0 0 14 3 6 #"move-x"
0 0 24 3 1 #" "
0 0 14 3 4 #"room"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [( "
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #" "
0 0 14 3 5 #"north"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"           ( "
0 0 14 3 6 #"move-x"
0 0 24 3 1 #" "
0 0 14 3 4 #"room"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [( "
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #" "
0 0 14 3 4 #"west"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"           ( "
0 0 14 3 6 #"move-y"
0 0 24 3 1 #" "
0 0 14 3 4 #"room"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"          [( "
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #" "
0 0 14 3 4 #"east"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"           ( "
0 0 14 3 6 #"move-y"
0 0 24 3 1 #" "
0 0 14 3 4 #"room"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";(define (startgame initial-id)"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 43 #"let loop ((id initial-id) (description #t))"
0 0 24 29 1 #"\n"
0 0 17 3 18 #";  (if description"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";     (printf \""
0 0 17 3 5 #"~a\\n>"
0 0 17 3 21 #" \" (get-response id))"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";    (printf \""
0 0 17 3 1 #">"
0 0 17 3 4 #" \"))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";(let* ((input (read-line))"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";      (string-tokens (string-tokenize input))"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";    (tokens (map string->symbol string-tokens)))"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";(let ((response (lookup id tokens)))"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";(cond ((number? response)"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";      (loop response #t))"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";    ((eq? #f response)"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";    (format #t \""
0 0 17 3 4 #"huh?"
0 0 17 3 1 #" "
0 0 17 3 1 #"I"
0 0 17 3 1 #" "
0 0 17 3 4 #"didn"
0 0 17 3 1 #"'"
0 0 17 3 1 #"t"
0 0 17 3 1 #" "
0 0 17 3 10 #"understand"
0 0 17 3 1 #" "
0 0 17 3 9 #"that!\\n\")"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";   (loop id #f))"
0 0 24 29 1 #"\n"
0 0 17 3 23 #"; ((eq? response 'look)"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; (get-directions id)"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";(loop id #f))"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";((eq? response 'put)"
0 0 24 29 1 #"\n"
0 0 17 3 21 #"; (put-item id input)"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";(loop id #f))"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";((eq? response 'pick)"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";(pick-item id input)"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";(loop id #f))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";((eq? response 'inventory)"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";(display-inventory )"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";(loop id #f))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 24 29 1 #"\n"
0 0 17 3 22 #";((eq? response 'quit)"
0 0 24 29 1 #"\n"
0 0 17 3 14 #"; (format #t \""
0 0 17 3 2 #"So"
0 0 17 3 1 #" "
0 0 17 3 4 #"Long"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 3 #"and"
0 0 17 3 1 #" "
0 0 17 3 6 #"Thanks"
0 0 17 3 1 #" "
0 0 17 3 3 #"for"
0 0 17 3 1 #" "
0 0 17 3 3 #"All"
0 0 17 3 1 #" "
0 0 17 3 3 #"the"
0 0 17 3 1 #" "
0 0 17 3 11 #"Fish...\\n\")"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";               (exit)))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"( "
0 0 15 3 6 #"define"
0 0 24 3 3 #" ( "
0 0 14 3 9 #"startgame"
0 0 24 3 1 #" "
0 0 14 3 7 #"room-id"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   ( "
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 4 #"loop"
0 0 24 3 4 #" (( "
0 0 14 3 3 #"rid"
0 0 24 3 1 #" "
0 0 14 3 7 #"room-id"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"show-maze"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 3 #"rid"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      ( "
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #" "
0 0 19 3 3 #"You"
0 0 19 3 1 #" "
0 0 19 3 3 #"are"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 4 #"~a\\n"
0 0 19 3 1 #" "
0 0 19 3 2 #"> "
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 14 3 8 #"hash-ref"
0 0 24 3 1 #" "
0 0 14 3 5 #"rooms"
0 0 24 3 1 #" "
0 0 14 3 3 #"rid"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      ( "
0 0 15 3 3 #"let"
0 0 24 3 4 #" (( "
0 0 14 3 5 #"input"
0 0 24 3 3 #" ( "
0 0 14 3 4 #"read"
0 0 24 3 4 #" )))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         ( "
0 0 15 3 4 #"cond"
0 0 24 3 4 #" [( "
0 0 14 3 3 #"eq?"
0 0 24 3 1 #" "
0 0 14 3 5 #"input"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 4 #"quit"
0 0 24 3 5 #" ) ( "
0 0 14 3 4 #"exit"
0 0 24 3 5 #" )]) "
0 0 17 3 23 #"; ; \342\200\231 help with paths"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 17 3 2 #";("
0 0 17 3 4 #"cond"
0 0 17 3 5 #" [(( "
0 0 17 3 3 #"eq?"
0 0 17 3 1 #" "
0 0 17 3 5 #"input"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 4 #"pick"
0 0 17 3 5 #" )  ("
0 0 17 3 9 #"pick-item"
0 0 17 3 2 #"  "
0 0 17 3 1 #"'"
0 0 17 3 7 #"room-id"
0 0 17 3 1 #" "
0 0 17 3 48 #"rid input) (loop rid))]) ; ; \342\200\231 help with paths"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"         ( "
0 0 14 3 2 #"if"
0 0 24 3 3 #" ( "
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 14 3 5 #"input"
0 0 24 3 3 #" ( "
0 0 14 3 5 #"paths"
0 0 24 3 1 #" "
0 0 14 3 3 #"rid"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              ( "
0 0 15 3 3 #"let"
0 0 24 3 4 #" (( "
0 0 14 3 9 #"direction"
0 0 24 3 3 #" ( "
0 0 14 3 6 #"lookup"
0 0 24 3 1 #" "
0 0 14 3 3 #"rid"
0 0 24 3 1 #" "
0 0 14 3 5 #"input"
0 0 24 3 4 #" )))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                 ( "
0 0 15 3 4 #"cond"
0 0 24 3 4 #" (( "
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 3 #"rid"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 5 #" ) ( "
0 0 14 3 4 #"loop"
0 0 24 3 1 #" "
0 0 14 3 3 #"rid"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                        (( "
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 3 #" ( "
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"X"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #")("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"Y"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         ( "
0 0 14 3 9 #"show-maze"
0 0 24 3 1 #" "
0 0 14 3 1 #"m"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         ( "
0 0 14 3 9 #"displayln"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 1 #" "
0 0 19 3 3 #"You"
0 0 19 3 1 #" "
0 0 19 3 4 #"have"
0 0 19 3 1 #" "
0 0 19 3 7 #"reached"
0 0 19 3 1 #" "
0 0 19 3 3 #"the"
0 0 19 3 1 #" "
0 0 19 3 4 #"exit"
0 0 19 3 1 #" "
0 0 19 3 4 #"door"
0 0 19 3 2 #" ."
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         ( "
0 0 14 3 4 #"exit"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                        ( "
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          ( "
0 0 14 3 4 #"loop"
0 0 24 3 1 #" "
0 0 14 3 9 #"direction"
0 0 24 3 5 #" ))))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              ( "
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                 ( "
0 0 14 3 6 #"printf"
0 0 24 3 1 #" "
0 0 19 3 1 #"\""
0 0 19 3 4 #"huh?"
0 0 19 3 1 #" "
0 0 19 3 1 #"I"
0 0 19 3 1 #" "
0 0 19 3 4 #"didn"
0 0 19 3 1 #" "
0 0 19 3 4 #"\342\200\231t"
0 0 19 3 1 #" "
0 0 19 3 10 #"understand"
0 0 19 3 1 #" "
0 0 19 3 1 #":"
0 0 19 3 5 #" ~a\\n"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 5 #"input"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                 ( "
0 0 14 3 4 #"loop"
0 0 24 3 1 #" "
0 0 14 3 3 #"rid"
0 0 24 3 7 #" ))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";(define (startgame room-id)"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";  (let loop ((rid room-id))"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";    (printf \""
0 0 17 3 33 #"~a\\n\" (get-room-description rid))"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";    (printf \""
0 0 17 3 1 #">"
0 0 17 3 3 #" \")"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";    (let ((input (read)))"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";      (if (eq? input 'quit) (exit) 'continue)"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";      (if (member input '(north south east west))"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";          (let ((direction (lookup rid input)))"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";            (if (zero? direction)"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";                (loop rid)"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";                (loop direction)))"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";          (begin"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";            (printf \""
0 0 17 3 4 #"huh?"
0 0 17 3 1 #" "
0 0 17 3 1 #"I"
0 0 17 3 1 #" "
0 0 17 3 4 #"didn"
0 0 17 3 1 #"'"
0 0 17 3 1 #"t"
0 0 17 3 1 #" "
0 0 17 3 11 #"understand:"
0 0 17 3 1 #" "
0 0 17 3 12 #"~a\\n\" input)"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";            (loop rid))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";(startgame 1)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 9 #"startgame"
0 0 24 3 1 #" "
0 0 14 3 5 #"start"
0 0 24 3 1 #")"
0           0
